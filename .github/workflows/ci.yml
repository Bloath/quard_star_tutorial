name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'doc/**'
      - 'tutorial/**'
      - 'README.md'
      - '.readthedocs.yaml'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'doc/**'
      - 'tutorial/**'
      - 'README.md'
      - '.readthedocs.yaml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Install prerequisites
        run: |
          sudo apt update
          sudo apt install -y wget device-tree-compiler ninja-build git build-essential \
                pkg-config zlib1g-dev libglib2.0-0 libglib2.0-dev libsdl1.2-dev libpixman-1-dev \
                libfdt-dev autoconf automake libtool librbd-dev libaio-dev flex \
                bison make cmake gcc python3 ninja-build vim swig python3-dev libedit-dev \
                libncurses5-dev liblzma-dev lua5.3 liblua5.3-dev libxml2-dev doxygen graphviz \
                ninja-build pkg-config libglib2.0-dev libpixman-1-dev libgtk-3-dev libcap-ng-dev \
                libattr1-dev device-tree-compiler bison flex

      - name: Download and extract prebuilt toolchain
        run: |
          # download prebuilt toolchain
          DOWNLOAD_URL_BASE=https://github.com/riscv/riscv-gnu-toolchain/releases/download/2021.08.07/
          wget $DOWNLOAD_URL_BASE/riscv64-glibc-ubuntu-20.04-nightly-2021.08.07-nightly.tar.gz
          # prebuilt toolchain from riscv official is not ok, due to medlow compile
          # see The default code model, medlow, can only access addresses below 0x80000000 on a 64-bit part,
          # or the entire memory on a 32-bit part due to wraparound. If you want to access memory above 2GB on a 64-bit part,
          # you have to use the medany code model, via the -mcmodel=medany compiler option. If you are linking with libraries,
          # like the C library, then those libraries must also be compiled with medany. It you are building your own toolchain,
          # this works best if you use --with-cmodel=medany when configuring
          #wget $DOWNLOAD_URL_BASE/riscv64-elf-ubuntu-20.04-nightly-2021.08.07-nightly.tar.gz
          #tar -xzf riscv64-elf-ubuntu-20.04-nightly-2021.08.07-nightly.tar.gz
          RISCV_GLIBC_TOOLCHAIN=/opt/gcc-riscv64-unknown-linux-gnu
          RISCV_NEWLIBC_TOOLCHAIN=/opt/gcc-riscv64-unknown-elf
          # wget all prebuilt toolchain
          wget https://static.dev.sifive.com/dev-tools/freedom-tools/v2020.12/riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14.tar.gz
          wget $DOWNLOAD_URL_BASE/riscv64-glibc-ubuntu-20.04-nightly-2021.08.07-nightly.tar.gz
          tar -xzf riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14.tar.gz
          mv riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14 $RISCV_NEWLIBC_TOOLCHAIN
          tar -xzf riscv64-glibc-ubuntu-20.04-nightly-2021.08.07-nightly.tar.gz
          mv riscv $RISCV_GLIBC_TOOLCHAIN
          rm -f *.tar.gz
          # strip binaries
          cd /opt
          set +e
          for i in `find libexec bin -type f`
          do
          strip -s $i
          done
          cd -
          $RISCV_NEWLIBC_TOOLCHAIN/bin/riscv64-unknown-elf-gcc -v
          $RISCV_GLIBC_TOOLCHAIN/bin/riscv64-unknown-linux-gnu-gcc -v

      - name: Build all
        run: |
          # replace pkexec with sudo for ci
          sed -i 's/pkexec/sudo/g' build.sh
          bash build.sh
          du -sh output
          tar -czf build.tar.gz output/ run.sh
          tar -czf toolchain.tar.gz /opt/gcc-riscv64-unknown-linux-gnu /opt/gcc-riscv64-unknown-elf
          du -sh /opt/gcc-riscv64-unknown-linux-gnu
          du -sh /opt/gcc-riscv64-unknown-elf

      - name: Upload build asserts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: build
          path: |
            build.tar.gz

      - name: Upload prebuilt toolchain
        uses: actions/upload-artifact@v2.2.4
        with:
          name: prebuilt_toolchain
          path: |
            toolchain.tar.gz

      - name: Run tests pflash boot
        run: |
          timeout --foreground -s SIGKILL 5m bash run.sh nographic default pfalsh > >(tee run_qemu.log) || {
            if cat run_qemu.log | grep "init process" ; then echo "Kernel boot successfully" ; else echo "Kernel boot failed" && exit 1; fi;
            if cat run_qemu.log | grep "Welcome debugging on Qemu Quard Star board!" ; then echo "Pass simulation" && killall qemu-system-riscv64 && exit 0; else echo "Failed in init process" && exit 1; fi;
          }
          rm run_qemu.log

      - name: Run tests spi boot
        run: |
          timeout --foreground -s SIGKILL 5m bash run.sh nographic default spi > >(tee run_qemu.log) || {
            if cat run_qemu.log | grep "init process" ; then echo "Kernel boot successfully" ; else echo "Kernel boot failed" && exit 1; fi;
            if cat run_qemu.log | grep "Welcome debugging on Qemu Quard Star board!" ; then echo "Pass simulation" && killall qemu-system-riscv64 && exit 0; else echo "Failed in init process" && exit 1; fi;
          }
          rm run_qemu.log

      - name: Run tests sd boot
        run: |
          timeout --foreground -s SIGKILL 5m bash run.sh nographic default sd > >(tee run_qemu.log) || {
            if cat run_qemu.log | grep "init process" ; then echo "Kernel boot successfully" ; else echo "Kernel boot failed" && exit 1; fi;
            if cat run_qemu.log | grep "Welcome debugging on Qemu Quard Star board!" ; then echo "Pass simulation" && killall qemu-system-riscv64 && exit 0; else echo "Failed in init process" && exit 1; fi;
          }
          rm run_qemu.log