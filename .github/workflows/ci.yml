name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'doc/**'
      - 'tutorial/**'
      - 'README.md'
      - '.readthedocs.yaml'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'doc/**'
      - 'tutorial/**'
      - 'README.md'
      - '.readthedocs.yaml'
  workflow_dispatch:

jobs:
  main_build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: true
          activate-environment: ""

      - name: Install prerequisites
        shell: bash -l {0}
        run: |
          sudo apt update
          sudo apt install -y wget device-tree-compiler ninja-build git build-essential \
                pkg-config zlib1g-dev libglib2.0-0 libglib2.0-dev libsdl1.2-dev libpixman-1-dev \
                libfdt-dev autoconf automake libtool librbd-dev libaio-dev flex \
                bison make cmake gcc python3 ninja-build vim swig python3-dev libedit-dev \
                libncurses5-dev liblzma-dev lua5.3 liblua5.3-dev libxml2-dev doxygen graphviz \
                ninja-build pkg-config libglib2.0-dev libpixman-1-dev libgtk-3-dev libcap-ng-dev \
                libattr1-dev device-tree-compiler bison flex

      - name: Download and extract prebuilt toolchain
        shell: bash -l {0}
        run: |
          # download prebuilt toolchain
          DOWNLOAD_URL_BASE=https://github.com/riscv/riscv-gnu-toolchain/releases/download/2021.08.07/
          wget $DOWNLOAD_URL_BASE/riscv64-glibc-ubuntu-20.04-nightly-2021.08.07-nightly.tar.gz
          # prebuilt toolchain from riscv official is not ok, due to medlow compile
          # see The default code model, medlow, can only access addresses below 0x80000000 on a 64-bit part,
          # or the entire memory on a 32-bit part due to wraparound. If you want to access memory above 2GB on a 64-bit part,
          # you have to use the medany code model, via the -mcmodel=medany compiler option. If you are linking with libraries,
          # like the C library, then those libraries must also be compiled with medany. It you are building your own toolchain,
          # this works best if you use --with-cmodel=medany when configuring
          #wget $DOWNLOAD_URL_BASE/riscv64-elf-ubuntu-20.04-nightly-2021.08.07-nightly.tar.gz
          #tar -xzf riscv64-elf-ubuntu-20.04-nightly-2021.08.07-nightly.tar.gz
          RISCV_GLIBC_TOOLCHAIN=/opt/gcc-riscv64-unknown-linux-gnu
          RISCV_NEWLIBC_TOOLCHAIN=/opt/gcc-riscv64-unknown-elf
          # wget all prebuilt toolchain
          wget https://static.dev.sifive.com/dev-tools/freedom-tools/v2020.12/riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14.tar.gz
          wget $DOWNLOAD_URL_BASE/riscv64-glibc-ubuntu-20.04-nightly-2021.08.07-nightly.tar.gz
          tar -xzf riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14.tar.gz
          mv riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14 $RISCV_NEWLIBC_TOOLCHAIN
          tar -xzf riscv64-glibc-ubuntu-20.04-nightly-2021.08.07-nightly.tar.gz
          mv riscv $RISCV_GLIBC_TOOLCHAIN
          rm -f *.tar.gz
          # strip binaries
          cd /opt
          set +e
          for i in `find libexec bin -type f`
          do
          strip -s $i
          done
          cd -
          $RISCV_NEWLIBC_TOOLCHAIN/bin/riscv64-unknown-elf-gcc -v
          $RISCV_GLIBC_TOOLCHAIN/bin/riscv64-unknown-linux-gnu-gcc -v

      - name: Build all
        shell: bash -l {0}
        run: |
          # replace pkexec with sudo for ci
          sed -i 's/pkexec/sudo/g' build.sh
          bash build.sh
          du -sh output
          tar -czf build.tar.gz output/ update_tools/ run.sh update_tools.sh
          tar -czf toolchain.tar.gz /opt/gcc-riscv64-unknown-linux-gnu /opt/gcc-riscv64-unknown-elf
          du -sh /opt/gcc-riscv64-unknown-linux-gnu
          du -sh /opt/gcc-riscv64-unknown-elf

      - name: Upload build asserts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: build
          path: |
            build.tar.gz

      - name: Upload prebuilt toolchain
        uses: actions/upload-artifact@v2.2.4
        with:
          name: prebuilt_toolchain
          path: |
            toolchain.tar.gz

      - name: Run tests uart update
        shell: bash -l {0}
        run: |
          conda create -n tools python=3.9.7 -y
          conda activate tools
          pip3 install -r ./update_tools/requirements_pip.txt
          echo "run.sh update_test"
          timeout --foreground -s SIGKILL 3m bash run.sh update_test > >(tee run_qemu.log) &
          sleep 8
          echo "update_tools.sh"
          timeout --foreground -s SIGKILL 3m bash update_tools.sh > >(tee run_tools.log) && {
            if cat run_tools.log | grep "update firmware done"
            then
              killall qemu-system-riscv64
              echo "Pass simulation"
            else
              killall qemu-system-riscv64
              echo "Failed in updater process"
              exit 1
            fi
          }

      - name: Run tests pflash boot
        shell: bash -l {0}
        run: |
          timeout --foreground -s SIGKILL 3m bash run.sh nographic default pfalsh > >(tee run_qemu.log) || {
            echo
            if cat run_qemu.log | grep "init process"
            then
              echo "Kernel boot successfully"
            else
              echo "Kernel boot failed"
              killall qemu-system-riscv64
              exit 1
            fi
            if cat run_qemu.log | grep "Welcome debugging on Qemu Quard Star board!"
            then
              killall qemu-system-riscv64
              echo "Pass simulation"
            else
              killall qemu-system-riscv64
              echo "Failed in init process"
              exit 1
            fi
          }

      - name: Run tests spi boot
        shell: bash -l {0}
        run: |
          timeout --foreground -s SIGKILL 3m bash run.sh nographic default spi > >(tee run_qemu.log) || {
            echo
            if cat run_qemu.log | grep "init process"
            then
              echo "Kernel boot successfully"
            else
              echo "Kernel boot failed"
              killall qemu-system-riscv64
              exit 1
            fi
            if cat run_qemu.log | grep "Welcome debugging on Qemu Quard Star board!"
            then
              killall qemu-system-riscv64
              echo "Pass simulation"
            else
              killall qemu-system-riscv64
              echo "Failed in init process"
              exit 1
            fi
          }

      - name: Run tests sd boot
        shell: bash -l {0}
        run: |
          timeout --foreground -s SIGKILL 3m bash run.sh nographic default sd > >(tee run_qemu.log) || {
            echo
            if cat run_qemu.log | grep "init process"
            then
              echo "Kernel boot successfully"
            else
              echo "Kernel boot failed"
              killall qemu-system-riscv64
              exit 1
            fi
            if cat run_qemu.log | grep "Welcome debugging on Qemu Quard Star board!"
            then
              killall qemu-system-riscv64
              echo "Pass simulation"
            else
              killall qemu-system-riscv64
              echo "Failed in init process"
              exit 1
            fi
          }
          
  qemu_windows_build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: build_docker_image
        shell: bash
        run: |
          cd qemu-6.0.0
          ./tests/docker/docker.py --engine docker build -t qemu/fedora -f tests/docker/dockerfiles/fedora.docker --registry registry.gitlab.com/qemu-project/qemu --add-current-user
          
      - uses: addnab/docker-run-action@v3
        with:
          image: qemu/fedora:latest
          options: -w /home/runner/work/quard_star_tutorial/quard_star_tutorial -v /home/runner:/home/runner
          shell: bash -l {0}
          run: |
            SHELL_FOLDER=$(cd "$(dirname "$0")";pwd)
            cd qemu-6.0.0
            ./configure --prefix=$SHELL_FOLDER/output/qemu --cross-prefix=x86_64-w64-mingw32- --target-list=riscv64-softmmu --enable-gtk --disable-gio
            make -j16
            make install
            cd -
            cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/*.dll $SHELL_FOLDER/output/qemu/
            tar -czf qemu.tar.gz $SHELL_FOLDER/output/qemu
            
      - name: Upload build asserts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: qemu_windows_x64
          path: |
            qemu.tar.gz
